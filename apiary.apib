FORMAT: 1A
HOST: http://api.joinbrink.com/

# Brink API

These are the API endpoints that we will feed data into from the Brink Airships. Initially, these will be loaded in after flights.

## Throttling

Since there is going to be a lot of data being transferred, we want to throttle the API calls. We could potential charge for a 'Pro' version for more calls. For now let's do this:

* 1 API call per second  
* 10,000 API calls per day (about three hours of API calls at one per second)

## Authorization

The authorization mechanism for the brink api uses Javascript Web Tokens (JWT's) to identify the user 
who is making requests against the api. An authorized JWT will be returned from any the login endpoint
when authenticated. Once a JWT token has been obtained for a user, it must be passed along with every 
API request in the request header using the "Authorization" header. The token should be prefixed with 
"JWT" in the header.

Example: 
```
GET https://api.joinbrink.com/v1/flights
Authorization: JWT eyJhbGciOiJIUzI1NiIsI...

```

## Users [/v1/users]

### Create New User [PUT]

Create a new user of the brink api


+ Request (application/json)
    + Headers
        Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6...
    
    + Attributes
        + first_name: `Walter` (required, string) - User's first name
        + last_name: `White` (required, string) - User's last name
        + email: `saymyname@savewalterwhite.com` (required, string) - User's email 
        + username: `wwhite` (required, string) - Username
        + password: `3kj;15j3` (required, string) - Password

+ Response 201 (application/json)

    + Body

        {
          "jwt_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6MSwiaWF0IjoxNTA0MDIyOTE2LCJuYmYiOjE1MDQwMjI5MTYsImV4cCI6MTUzNTU1ODkxNn0.WImjOljfCc9yh3z4I8vcBIwsftKxWsjLsnEj704A9GY", 
          "user_id": 1, 
          "success": "User created."
        }
        
### Get User [GET /v1/users/{user_id}]

Get a user of the brink api

+ Request
    + Headers
        Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6...

+ Parameters

    + user_id (number, required) - The id of the user to fetch 

+ Response 200 (application/json)

    + Body

        {
          "id": 1, 
          "first_name": "Walter", 
          "last_name": "White", 
          "username": "wwhite",
          "email": "saymyname@savewalterwhite.com", 
          "created": "Tue, 29 Aug 2017 16:08:36 GMT", 
          "modified": "Tue, 29 Aug 2017 16:08:36 GMT"
        }

### Login User [POST /v1/login]

Authenticate a user and get the user details with a jwt token

+ Request (application/json)

    + Attributes
        + username: `wwhite` (string, required)
        + password: `3kj;15j3` (string, required)

+ Response 200 (application/json)

    + Attributes
        + id: 1 (number)
        + username: `admin` (string)
        + email: `matt@miller-media.com` (string)
        + first_name: null 
        + last_name: null 
        + date_created: `2017-08-30 23:51:55` (string)
        + date_modified: `2017-08-30 23:51:55` (string)
        + jwt_token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6MSwiaWF0IjoxNTA1MTY3MTM1LCJuYmYiOjE1MDUxNjcxMzUsImV4cCI6MTUzNjcwMzEzNX0.ZbsimRGhoV1sBtK5vdqVoPe_CwrXJLYSsd3VYRPJAFU` (string)

### Get JWT Token [POST /auth]

Authenticate user and get a jwt token only

+ Request (application/json)
    
    + Attributes
        + username: `wwhite` (string, required)
        + password: `3kj;15j3` (string, required)

+ Response 200 (application/json)

    + Attributes
        + access_token: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6MSwiaWF0IjoxNTA1MTQ4MjczLCJuYmYiOjE1MDUxNDgyNzMsImV4cCI6MTUzNjY4NDI3M30.55f-mU_VmZXADK6Q2WY3xtmk9giN3PG4w2vgM9xy4sQ` (string)

        
## Flights [/v1/flights]

### Get All Flights [GET /v1/flights]

This endpoint will return a list of all available flight ids

+ Request
    + Headers
        Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6...

+ Response 200 (application/json)

        [
            9,
            11,
        ]

### Get Single Flight [GET /v1/flights/{flight_id}]

Get the summary data for a given flight

+ Request
    + Headers
        Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6...

+ Parameters

    + flight_id (number) - ID of the flight in the form of an integer

+ Response 200 (application/json)

        {
                "flightTime":12345,
                "duration":32221,
                "startCoordinateX":12.1432,
                "startCoordinateY":112.2534,
                "endCoordinateX":123.124,
                "endCoordinateY":12.352,
                "maxAltitude":124,
                "minTemperature":12,
                "maxTemperature":65,
        }

### Create a New Flight [PUT]

Creata a new flight

+ Request (application/json)

    + Headers
        Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6...

    + Attributes

+ Response 201 (application/json)

    + Body

            {
                "response":"success",
                "message":"Flight created.",
                "id":9
            }
            
## Flight Data [/v1/flights/{flight_id}/data]

### Get Data for Flight [GET /v1/flights/{flight_id}/data]

Get the data points associated with a flight

+ Parameters

    + flight_id (number) - ID of the flight in the form of an integer
    
+ Request (application/json)

    + Headers
        Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6...

    + Attributes
        + page (number) - The page number being requested, defaults to 1 if not provided
        + per_page (number) - The number of results to show per page

+ Response 201 (application/json)

    + Attributes
        + pages (number) - The total number of pages of data available
        + total (number) - The total number of data items available
        + page (number) - The current page of data that is being returned
        + per_page (number) - The number of results requested per page
        + data (array[Flight Data])

### Create New Flight Data Record [PUT /v1/flights/{flight_id}/data]

Create a new data point for a flight

+ Request (application/json)

    + Headers
        Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6...

    + Attributes
        + timestamp: 1503873412 (required, number) - UNIX timestamp
        + altitude: 1234 (required, number) - Altitude in meters
        + pressure: 1234143 (required, number) - Barometric pressure in (not sure what barometric is measured in?)
        + coordinateX: 23.234 (required, number) - Current GPS X coordinate
        + coordinateY: 60.234 (required, number) - Current GPS Y coordinate
        + temperature: 31 (required, number) - Current temperature in Celsius

+ Response 201 (application/json)

    + Body

        {
            "response":"success",
            "message":"Flight data created."
        }

# Data Structures

## Flight Data (object)

+ flight_id (number) - The id of the flight the data is associated with
+ timestamp (number) - The timestamp that the data point was collected
+ coordinateX (number) - The X coordinate where the data point was collected
+ coordinateY (number) - The Y coordinate where the data point was collected
+ pressure (number) - The pressure at the time the data point was collected
+ temperature (number) - The temperature at the time the data point was collected
+ altitude (number) - The altitude at which the data point was collected